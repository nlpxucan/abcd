import openai
import time

openai.api_key = 'your api key'


def get_oai_completion(prompt):
    """
    Retrieves OpenAI GPT-3.5-Turbo completion for the given prompt.

    Parameters
    ----------
    prompt : str
        The input prompt for which completion is requested.

    Returns
    -------
    gpt_output : str or None
        The completion generated by the OpenAI GPT-3.5-Turbo model, or None if an error occurs.

    Notes
    -----
    This function sends a request to the OpenAI API to generate completion for the given prompt
    using the GPT-3.5-Turbo model. It handles various types of errors and retries the request
    in case of a timeout error.

    Raises
    ------
    None

    See Also
    --------
    openai.ChatCompletion.create
    """
    try: 
        response = openai.ChatCompletion.create(
  model="gpt-3.5-turbo",
  messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": prompt},
       
    ],
   temperature=1,
   max_tokens=2048,
   top_p=0.95,
   frequency_penalty=0,
   presence_penalty=0,
   stop=None
)
        res = response["choices"][0]["message"]["content"]
       
        gpt_output = res
        return gpt_output
    except requests.exceptions.Timeout:
        # Handle the timeout error here
        print("The OpenAI API request timed out. Please try again later.")
        return None
    except openai.error.InvalidRequestError as e:
        # Handle the invalid request error here
        print(f"The OpenAI API request was invalid: {e}")
        return None
    except openai.error.APIError as e:
        if "The operation was timeout" in str(e):
            # Handle the timeout error here
            print("The OpenAI API request timed out. Please try again later.")
#             time.sleep(3)
            return get_oai_completion(prompt)            
        else:
            # Handle other API errors here
            print(f"The OpenAI API returned an error: {e}")
            return None
    except openai.error.RateLimitError as e:
        return get_oai_completion(prompt)

def call_chatgpt(ins):
    """
    Calls the OpenAI GPT-3.5-Turbo model to generate completion for the given input.

    Parameters
    ----------
    ins : str
        The input prompt for which completion is requested.

    Returns
    -------
    ans : str
        The completion generated by the OpenAI GPT-3.5-Turbo model.

    Notes
    -----
    This function repeatedly calls the `get_oai_completion` function to retrieve completion
    for the given input prompt. It retries the request if an error occurs, with a maximum of 15 retries.

    Raises
    ------
    None

    See Also
    --------
    get_oai_completion
    """
    success = False
    re_try_count = 15
    ans = ''
    while not success and re_try_count >= 0:
        re_try_count -= 1
        try:
            ans = get_oai_completion(ins)
            success = True
        except:
            time.sleep(5)
            print('retry for sample:', ins)
    return ans